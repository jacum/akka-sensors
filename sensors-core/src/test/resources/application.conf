
akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  jvm-exit-on-fatal-error = true
  log-config-on-start = off

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    allow-java-serialization = true // for in-memory unit tests only!
    default-dispatcher {
      type = "akka.sensors.dispatch.InstrumentedDispatcherConfigurator"
      executor = "akka.sensors.dispatch.InstrumentedExecutor"

      instrumented-executor {
        delegate = "fork-join-executor"
        measure-runs = true
        watch-long-runs = true
        watch-check-interval = 1s
        watch-too-long-run = 3s
      }
    }

    default-blocking-io-dispatcher {
      type = "akka.sensors.dispatch.InstrumentedDispatcherConfigurator"
      executor = "akka.sensors.dispatch.InstrumentedExecutor"

      instrumented-executor {
        delegate = "thread-pool-executor"
        measure-runs = true
        watch-long-runs = false
      }
    }
  }

  remote.artery {
    canonical {
      hostname = "127.0.0.1"
      port = 2551
    }
  }

  cluster {
    roles = ["state-node"]
    min-nr-of-members = 1
    configuration-compatibility-check.enforce-on-join = off
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    sharding {
      least-shard-allocation-strategy.rebalance-threshold = 5
      remember-entities = on
    }
    shutdown-after-unsuccessful-join-seed-nodes = 5m
    akka.remote.use-passive-connections = off

    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    split-brain-resolver {
      active-strategy = keep-majority
      stable-after = 20s
      down-all-when-unstable = on
    }
    seed-nodes = ["akka://instrumented@127.0.0.1:2551"]
  }

  persistence {

    max-concurrent-recoveries = 1000
    snapshot-store.plugin = ""

    journal {
      plugin = "inmemory-journal"
      auto-start-journals = ["akka.persistence.journal.inmem"]
    }
  }

  extensions = [
    akka.persistence.Persistence,
    akka.sensors.AkkaSensorsExtension
  ]

//  management {
//    cluster.bootstrap {
//      contact-point-discovery {
//        service-name = "bakery"
//        discovery-method = kubernetes-api
//        required-contact-point-nr = 1
//      }
//    }
//    health-checks {
//      readiness-path = "health/ready"
//      liveness-path = "health/alive"
//      liveness-checks {
////        cluster-health = "com.ing.bakery.baker.ClusterHealthCheck"
//      }
//      readiness-checks {
////        name = "com.ing.bakery.baker.BakerReadinessCheck"
//      }
//    }
//  }
}